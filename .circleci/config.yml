version: 2.1

jobs:
  build:
    parameters:
      python_version:
        type: string
        default: '3.8.8'
    working_directory: ~/dspace-python
    docker:
      - image: circleci/python:<< parameters.python_version >>-node-browsers-legacy
    steps:
      - checkout
      - restore_cache:
          name: Restore the cache
          keys:
            - pip-packages-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: 'Install package dependencies using pipenv'
          command: |
            sudo pip install pipenv
            pipenv install --dev
      - save_cache:
          key: pip-packages-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local/share/virtualenvs/venv

  lint:
    parameters:
      python_version:
        type: string
        default: '3.8.8'
    working_directory: ~/dspace-python
    docker:
      - image: circleci/python:<< parameters.python_version >>-node-browsers-legacy
    steps:
      - checkout
      - restore_cache:
          name: Restore the cache
          keys:
            - pip-packages-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: 'Install package dependencies using pipenv'
          command: |
            sudo pip install pipenv
            pipenv install --dev
      - run:
          name: 'Lint the Python source files'
          command: |
            pipenv run black --check ./bagit-python/**/*.py
            pipenv run black --check ./dissertations/**/*.py --force-exclude prepare_for_import.py
            pipenv run black --check ./dspace-extras-pubin/**/*.py
            pipenv run black --check ./ezids/**/*.py
            pipenv run black --check ./metadata/**/*.py
            pipenv run black --check ./pppl/**/*.py
            pipenv run black --check ./pubin/**/*.py
            pipenv run black --check ./senior_theses/**/*.py
            # This is much less permissive than black with the default configuration
            # pipenv run pylint ./**/*py
      - save_cache:
          key: pip-packages-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local/share/virtualenvs/venv

  doc:
    parameters:
      python_version:
        type: string
        default: '3.8.8'
    working_directory: ~/dspace-python
    docker:
      - image: circleci/python:<< parameters.python_version >>-node-browsers-legacy
    steps:
      - checkout
      - restore_cache:
          name: Restore the cache
          keys:
            - pip-packages-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: 'Install package dependencies using pipenv'
          command: |
            sudo pip install pipenv
            pipenv install --dev
      - run:
          name: 'Generate the code documentation'
          command: |
            pipenv run sphinx-build -b html source build/html
      - save_cache:
          key: pip-packages-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local/share/virtualenvs/venv
      - store_artifacts:
          path: ~/dspace-python/build/html

  build_thesis_central:
    parameters:
      python_version:
        type: string
        default: '3.8.8'
    working_directory: ~/dspace-python/thesiscentral-vireo
    docker:
      - image: circleci/python:<< parameters.python_version >>-node-browsers-legacy
    steps:
      - checkout
      - restore_cache:
          name: Restore the cache
          keys:
            - pip-packages-thesis-central-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: 'Install package dependencies using pipenv'
          command: |
            sudo pip install pipenv
            pipenv install --dev
      - save_cache:
          key: pip-packages-thesis-central-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local/share/virtualenvs/venv

  lint_thesis_central:
    parameters:
      python_version:
        type: string
        default: '3.8.8'
    working_directory: ~/dspace-python/thesiscentral-vireo
    docker:
      - image: circleci/python:<< parameters.python_version >>-node-browsers-legacy
    steps:
      - checkout
      - restore_cache:
          name: Restore the cache
          keys:
            - pip-packages-thesis-central-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: 'Install package dependencies using pipenv'
          command: |
            sudo pip install pipenv
            pipenv install --dev
      - run:
          name: 'Lint the Python source files'
          command: |
            pipenv run black --check ./**/*py
            # This is much less permissive than black with the default configuration
            # pipenv run pylint ./**/*py
      - save_cache:
          key: pip-packages-thesis-central-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local/share/virtualenvs/venv

  doc_thesis_central:
    parameters:
      python_version:
        type: string
        default: '3.8.8'
    working_directory: ~/dspace-python/thesiscentral-vireo
    docker:
      - image: circleci/python:<< parameters.python_version >>-node-browsers-legacy
    steps:
      - checkout
      - restore_cache:
          name: Restore the cache
          keys:
            - pip-packages-thesis-central-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: 'Install package dependencies using pipenv'
          command: |
            sudo pip install pipenv
            pipenv install --dev
      - run:
          name: 'Generate the code documentation'
          command: |
            pipenv run sphinx-build -b html source build/html
      - save_cache:
          key: pip-packages-thesis-central-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local/share/virtualenvs/venv
      - store_artifacts:
          path: ~/dspace-python/build/html

  test_thesis_central:
    parameters:
      python_version:
        type: string
        default: '3.8.8'
    working_directory: ~/dspace-python/thesiscentral-vireo
    docker:
      - image: circleci/python:<< parameters.python_version >>-node-browsers-legacy
    steps:
      - checkout
      - restore_cache:
          name: Restore the cache
          keys:
            - pip-packages-thesis-central-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: 'Install package dependencies using pipenv'
          command: |
            sudo pip install pipenv
            pipenv install --dev
      - run:
          name: 'Run the Python unit and module tests'
          command: |
            pipenv run pytest
      - save_cache:
          key: pip-packages-thesis-central-<< parameters.python_version >>-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local/share/virtualenvs/venv

workflows:
  ci:
    jobs:
      - build:
          name: build-python3.8
          python_version: '3.8.8'
      - lint:
          name: lint-python3.8
          python_version: '3.8.8'
          requires:
            - build-python3.8
      - doc:
          name: doc-python3.8
          python_version: '3.8.8'
          requires:
            - build-python3.8

  ci_thesis_central:
    jobs:
      - build_thesis_central:
          name: build-python3.8-thesis-central
          python_version: '3.8.8'
      - lint_thesis_central:
          name: lint-python3.8-thesis-central
          python_version: '3.8.8'
          requires:
            - build-python3.8-thesis-central
      - doc_thesis_central:
          name: doc-python3.8-thesis-central
          python_version: '3.8.8'
          requires:
            - build-python3.8-thesis-central
      - test_thesis_central:
          name: test-python3.8-thesis-central
          python_version: '3.8.8'
          requires:
            - lint-python3.8-thesis-central
